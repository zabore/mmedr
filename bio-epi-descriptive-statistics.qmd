---
  title: ""
---

# Descriptive statistics

It will be common to want some basic tabulations of categorical variables and summaries of continuous variables, to examine our data and make sure they are in line with what we expect, and to report results for papers.

In this section, we will learn some basic descriptive statistics including one-way and two-way contingency tables, summary statistics for continuous variables, and summary statistics by group. We will be using functions from the {janitor}, {dplyr}, and {readr} packages, which we have used previously, and we will also be introducing the {gt} and {gtsummary} packages. First, make sure these packages are installed and loaded in your current R session. 

*Note that all of these packages are already installed on Posit Workbench on the server*

```{r eval = FALSE}
install.packages("janitor")
install.packages("dplyr")
install.packages("readr")
install.packages("gt")
install.packages("gtsummary")
```

```{r message = FALSE, warning = FALSE}
library(janitor)
library(dplyr)
library(readr)
library(gt)
library(gtsummary)
```

The {gt} package will be used to create nicely styled tables.

Also make sure the breastcancer data are loaded into your current R session, with names standardized using the `clean_names()` function from the {janitor} package.

```{r echo = FALSE, message = FALSE}
mydf <- read_csv(here::here("data", "breastcancer.csv")) |> 
  clean_names()
```

```{r eval = FALSE, message = FALSE, }
mydf <- read_csv("~/mmedr/breastcancer.csv") |> 
  clean_names()
```

## One-way frequency table

We can use the `tabyl()` function from the {janitor} package to make a basic one-way frequency table. 

Let's say we want a table of grade:

```{r}
mydf |> 
  tabyl(grade)
```

Then we could additionally format the percentages using the `adorn_pct_formatting()` function:

```{r}
mydf |> 
  tabyl(grade) |> 
  adorn_pct_formatting()
```

And with just three short lines of code, we have a basic one-way contingency table for our categorical variable of interest.


## Two-way contingency table

We can similarly use the`tabyl()` function from the {janitor} package to make two-way contingency tables by simply adding another variable name, separated by a comma. Let's say we now want to see grade tabulated by rt:

```{r}
mydf |> 
  tabyl(grade, rt)
```

And we get a basic two-way contingency table with counts of grade according to the value of rt.

To enhance the appearance of our table, we can use the {gt} package and it's associated features to customize our two-way contingency table. 

See the [{gt} package website](https://gt.rstudio.com/) for many details and features.

Let's label the row variable and column variable, and add a title:

```{r}
mydf |> 
  tabyl(grade, rt) |> 
  gt(
    rowname_col = "grade" 
  ) |> 
  tab_spanner(          
    columns = 2:3,
    label = "Radiation therapy?"
  ) |> 
  tab_stubhead(         
    label = "Grade" 
  ) |> 
  tab_header(           
    title = "Grade according to radiation therapy"
  )
```

And now you see we have a nicely styled html table with the frequencies of grade according to rt, with row and column headers and a title.

Alternatively, we could display percentages in our table. Let's say we are interested in row percentages, to see what percentage of subjects received radiation therapy within each level of grade.

```{r}
mydf |> 
  tabyl(grade, rt) |> 
  adorn_percentages(denominator = "row") |> 
  gt(
    rowname_col = "grade" 
  ) |> 
  fmt_percent(
    columns = -1,
    decimals = 1
  ) |> 
  tab_spanner(          
    columns = 2:3,
    label = "Radiation therapy?"
  ) |> 
  tab_stubhead(         
    label = "Grade" 
  ) |> 
  tab_header(           
    title = "Grade according to radiation therapy"
  )
```

::: {.callout-tip}
The `case_match()` function from the {dplyr} package is useful for recoding the levels of a categorical variable to get more desriptive levels when making tables or presenting summaries, e.g. from 0 to "No" and 1 to "Yes"
:::

To make the table look even nicer, we could use the `case_match()` function from the {dplyr} package, which works similarly to `case_when()`, and is useful for recoding the levels of a categorical variable. We may want to create more descriptive levels than the 1/0 indicators these variables currently contain.

```{r}
mydf |> 
  mutate(
    rt_text = case_match(
      rt,
      1 ~ "Yes",
      0 ~ "No"
    )
  ) |> 
  tabyl(grade, rt_text) |> 
  adorn_percentages(denominator = "row") |> 
  gt(
    rowname_col = "grade" 
  ) |> 
  fmt_percent(
    columns = -1,
    decimals = 1
  ) |> 
  tab_spanner(          
    columns = 2:3,
    label = "Radiation therapy?"
  ) |> 
  tab_stubhead(         
    label = "Grade" 
  ) |> 
  tab_header(           
    title = "Grade according to radiation therapy"
  )
```


## Summary statistics

We can use the `summarize()` function from the {dplyr} package to compute summary statistics.

Let's compute the mean and standard deviation of age_dx_yrs:

```{r}
mydf |> 
  summarize(
    avg_age = mean(age_dx_yrs),
    sd_age = sd(age_dx_yrs)
  )
```

## Summary statistics by group

And we can easily extend this code to generate summary statistics by group by using the `group_by()` function from the {dplyr} package prior to using `summarize()`.

::: {.callout-tip}
The `group_by()` function is useful in many settings, and it takes an existing dataframe and converts it to a grouped dataframe where all following operations are done within the group.

Note: It is best practice to `ungroup()` when group operations are complete, to avoid unintended results.

For example:

```{r}
mydf |> 
  group_by(rt) |> 
  summarize(
    avg_age = mean(age_dx_yrs),
    sd_age = sd(age_dx_yrs)
  ) 
```
:::


Recall that if there are missing values, these must be accounted for by supplying the appropriate additional argument to the `mean()` and `sd()` functions. For example, if we want to summarize tumor_size_cm according to grade, we can use:

```{r}
mydf |> 
  group_by(grade) |> 
  summarize(
    avg_size = mean(tumor_size_cm, na.rm = TRUE),
    sd_size = sd(tumor_size_cm, na.rm = TRUE)
  ) |> 
  ungroup()
```

## Summarize multiple variables

You can summarize multiple variables using a single function by name:

```{r}
mydf |> 
  summarise_at(
    c("age_dx_yrs", "tumor_size_cm"), mean, na.rm = TRUE
    )
```

Or using selection helpers inside `vars()`:

```{r}
mydf |> 
  summarise_at(
    vars(age_dx_yrs:tumor_size_cm), mean, na.rm = TRUE
    )
```

You can also select all variables of a certain type, like all numeric variables:

```{r}
mydf |> 
  summarise_if(is.numeric, mean, na.rm = TRUE)
```

And you can summarize select variables using multiple functions by including them in a list:

```{r}
mydf |> 
  summarise_at(
    c("age_dx_yrs", "tumor_size_cm"), list(mean, sd), na.rm = TRUE
    )
```

To specify the string appended to the variable names in the results, make a named list instead:

```{r}
mydf |> 
  summarise_at(
    c("age_dx_yrs", "tumor_size_cm"), list(mean = mean, sd = sd), na.rm = TRUE
    )
```

And you can also do this by group, by adding in a `group_by()` statement:

```{r}
mydf |> 
  group_by(rt) |> 
  summarise_at(
    c("age_dx_yrs", "tumor_size_cm"), list(mean = mean, sd = sd), na.rm = TRUE
    )
```

## Creating publication-ready tables

In clinical research, we always start our papers with a "Table 1" showing characteristics of the included patient sample, which usually includes a mix of categorical and continuous variables. The {gtsummary} package can help with this.

Let's make a table of all variables in the breast cancer data except for the outcomes, time and event, using the `tbl_summary()` function from the {gtsummary} package:

```{r}
mydf |> 
  select(
    -time,
    -event
  ) |> 
  tbl_summary()
```

And we see that with these few lines of code, by default we get a table that shows the number and percentage for binary or categorical variables and the median and first and third quartiles for continuous variables.

The tables are highly customizable.

We can label the row variables:

```{r}
mydf |> 
  select(
    -time,
    -event
  ) |> 
  tbl_summary(
    label = list(
      rt = "Radiation therapy",
      age_dx_yrs = "Age at diagnosis (years)",
      tumor_size_cm = "Tumor size (cm)",
      grade = "Grade",
      n_ln_pos_3_vs_1or2 = "3 vs 1/2 positive lymph nodes",
      nodal_ratio = "Nodal ratio",
      lvi = "LVI",
      er_or_pr_pos = "ER+ or PR+",
      her2_pos = "Her2+",
      quadrant_inner_vs_upper = "Inner vs upper quadrant",
      optimal_systemic_therapy = "Optimal systemic therapy"
    )
  )
```

We can make the variable names bold, and the levels italic:

```{r}
mydf |> 
  select(
    -time,
    -event
  ) |> 
  tbl_summary(
    label = list(
      rt = "Radiation therapy",
      age_dx_yrs = "Age at diagnosis (years)",
      tumor_size_cm = "Tumor size (cm)",
      grade = "Grade",
      n_ln_pos_3_vs_1or2 = "3 vs 1/2 positive lymph nodes",
      nodal_ratio = "Nodal ratio",
      lvi = "LVI",
      er_or_pr_pos = "ER+ or PR+",
      her2_pos = "Her2+",
      quadrant_inner_vs_upper = "Inner vs upper quadrant",
      optimal_systemic_therapy = "Optimal systemic therapy"
    )
  ) |> 
  bold_labels() |> 
  italicize_levels()
```

We could add a column variable, and summarize by that, and also overall:

```{r}
mydf |> 
  select(
    -time,
    -event
  ) |> 
  tbl_summary(
    label = list(
      rt = "Radiation therapy",
      age_dx_yrs = "Age at diagnosis (years)",
      tumor_size_cm = "Tumor size (cm)",
      grade = "Grade",
      n_ln_pos_3_vs_1or2 = "3 vs 1/2 positive lymph nodes",
      nodal_ratio = "Nodal ratio",
      lvi = "LVI",
      er_or_pr_pos = "ER+ or PR+",
      her2_pos = "Her2+",
      quadrant_inner_vs_upper = "Inner vs upper quadrant",
      optimal_systemic_therapy = "Optimal systemic therapy"
    ),
    by = rt
  ) |> 
  bold_labels() |> 
  italicize_levels() |> 
  add_overall()
```

We can customize the column labels:

```{r}
mydf |> 
  select(
    -time,
    -event
  ) |> 
  tbl_summary(
    label = list(
      rt = "Radiation therapy",
      age_dx_yrs = "Age at diagnosis (years)",
      tumor_size_cm = "Tumor size (cm)",
      grade = "Grade",
      n_ln_pos_3_vs_1or2 = "3 vs 1/2 positive lymph nodes",
      nodal_ratio = "Nodal ratio",
      lvi = "LVI",
      er_or_pr_pos = "ER+ or PR+",
      her2_pos = "Her2+",
      quadrant_inner_vs_upper = "Inner vs upper quadrant",
      optimal_systemic_therapy = "Optimal systemic therapy"
    ),
    by = rt
  ) |> 
  bold_labels() |> 
  italicize_levels() |> 
  add_overall() |> 
  modify_header(
    stat_1 = "**No radiation**  \nN = 1,228",
    stat_2 = "**Radiation**  \nN = 1,772"
  )
```

*Note: to see the underlying header names, do the following*:

```{r}
temp <-
  mydf |> 
  select(
    -time,
    -event
  ) |> 
  tbl_summary(
    by = rt
  )

show_header_names(temp)
```

And we can add a table header:

```{r}
mydf |> 
  select(
    -time,
    -event
  ) |> 
  tbl_summary(
    label = list(
      rt = "Radiation therapy",
      age_dx_yrs = "Age at diagnosis (years)",
      tumor_size_cm = "Tumor size (cm)",
      grade = "Grade",
      n_ln_pos_3_vs_1or2 = "3 vs 1/2 positive lymph nodes",
      nodal_ratio = "Nodal ratio",
      lvi = "LVI",
      er_or_pr_pos = "ER+ or PR+",
      her2_pos = "Her2+",
      quadrant_inner_vs_upper = "Inner vs upper quadrant",
      optimal_systemic_therapy = "Optimal systemic therapy"
    ),
    by = rt
  ) |> 
  bold_labels() |> 
  italicize_levels() |> 
  add_overall() |> 
  modify_header(
    stat_1 = "**No radiation**  \nN = 1,228",
    stat_2 = "**Radiation**  \nN = 1,772"
  ) |> 
  modify_caption("Table of patient characteristics by radiation")
```

We can also customize the statistics in the table, for example use the mean and standard deviation for all continuous variables:

```{r}
mydf |> 
  select(
    -time,
    -event
  ) |> 
  tbl_summary(
    label = list(
      rt = "Radiation therapy",
      age_dx_yrs = "Age at diagnosis (years)",
      tumor_size_cm = "Tumor size (cm)",
      grade = "Grade",
      n_ln_pos_3_vs_1or2 = "3 vs 1/2 positive lymph nodes",
      nodal_ratio = "Nodal ratio",
      lvi = "LVI",
      er_or_pr_pos = "ER+ or PR+",
      her2_pos = "Her2+",
      quadrant_inner_vs_upper = "Inner vs upper quadrant",
      optimal_systemic_therapy = "Optimal systemic therapy"
    ),
    by = rt,
    statistic = list(all_continuous() ~ "{mean} ({sd})")
  ) |> 
  bold_labels() |> 
  italicize_levels() |> 
  add_overall() |> 
  modify_header(
    stat_1 = "**No radiation**  \nN = 1,228",
    stat_2 = "**Radiation**  \nN = 1,772"
  ) |> 
  modify_caption("Table of patient characteristics by radiation")
```

See the {gtsummary} website for details and examples: [https://www.danieldsjoberg.com/gtsummary/](https://www.danieldsjoberg.com/gtsummary/)












