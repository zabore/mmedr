[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R For Molecular Medicine",
    "section": "",
    "text": "This is the new website to host R teaching materials for the Cleveland Clinic Molecular Medicine PhD students. It is in the very early stages of development and very much a work in progress.\nThe material will be split across 5 1-hour sessions as part of the Tools course, followed by 2 2-hour sessions as part of the Biostatistics and Epidemiology course."
  },
  {
    "objectID": "index.html#tools-course",
    "href": "index.html#tools-course",
    "title": "R For Molecular Medicine",
    "section": "Tools course",
    "text": "Tools course\n\nSession 1\n\nIntroduction to the tools\n\nR\nRStudio\nPosit Workbench\n\nThings to know about R (?)\n\nCase sensitive\nVariable names (janitor)\nExecuting code\nGetting help\nThe pipe operator\nR projects\nhere package/reproducibility more generally?\n\nInstalling and loading R packages\n\nCRAN\nGithub\nBioconductor\n\nLoading data\n\n.xlsx\n.csv\nOther formats\n\n\n\n\nSession 2\n\nBasic programming\n\nAssigning objects\nFunctions\nVectors and sequences\nStrings\nTesting for equality\n\n\n\n\nSession 3\n\nManipulate dataframes\n\nIndexing operators - extract rows/columns\nAccessing variables in datasets\nSubsetting data\nRename columns\nAdd columns\nGroup a continuous variable\nRecategorize a categorical variable\nSort by row\nReshape (wide to long, long to wide)\n\n\n\n\nSession 4\n\nDescriptive statistics\n\nOne-way frequency table\nTwo-way contingency table\nSummary statistics\nSummary statistics by group\n\n\n\n\nSession 5\n\nPut it all together"
  },
  {
    "objectID": "index.html#biostatistics-and-epidemiology",
    "href": "index.html#biostatistics-and-epidemiology",
    "title": "R For Molecular Medicine",
    "section": "Biostatistics and Epidemiology",
    "text": "Biostatistics and Epidemiology\n\nSession 1\n\nRefresher of the Tools course material\n\nR basics\nDescriptive statistics\n\nVisualization\n\nScatterplot\nBar chart\nHistogram\nLine chart\nBoxplot\nCustomization\nFaceting\nSaving plots\n\n\n\n\nSession 2\n\nAdjustment for multiple comparisons\nAdvanced programming\n\nWriting custom functions\nFor loops/apply/map\n\nStatistical tests\n\nFisher’s exact test\nChi-squared test\nWilcoxon rank sum test/Kruskal-Wallis test\nT-test\nANOVA\nWilcoxon signed rank test\nPaired t-test"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "R For Molecular Medicine",
    "section": "",
    "text": "This will be the Introduction to the tools lesson."
  },
  {
    "objectID": "bio-epi-refresher.html",
    "href": "bio-epi-refresher.html",
    "title": "Biostatistics and Epidemiology - Session 1",
    "section": "",
    "text": "In this session, we will review the basics of R and generating descriptive statistics in R, which were introduced in the Tools course. Then we will learn about data visualization, including creating scatterplots, bar charts, histograms, line charts, and boxplots. We’ll discuss plot customization, faceting, and saving plots. Both univariate and bivariable plotting will be covered.\n\n\n\n\nFirst, we’ll review the basics of R and R programming.\n\n\n\n\n\n\nR is a free, open-source software environment for statistical computing and graphics\nMany of the functions you may wish to use will be contributed by other users as packages and available through repositories such as CRAN, GitHub, or Bioconductor, among others\nIt is your responsibility to vet the quality and accuracy of any user-contributed packages\nThe functions available with the initial installation of R, known as base R, can be considered trustworthy\n\n\n\n\n\nGo to the website for The Comprehensive R Archive Network.\nThe top of the web page provides three links for downloading R. Follow the link that describes your operating system: Windows, Mac, or Linux.\n\n\n\n\n\n\n\n\nRStudio is an Integrated Development Environment (IDE).\nIt runs R and allows users to develop and edit programs and offers higher quality graphics and a more user-friendly interface.\nNote that RStudio is not a standalone program, you must have a separate installation of R\n\n\n\n\n\nGo to the website for RStudio\nSelect “Download RStudio Desktop” under “Open Source Edition”\nClick the button for “Download RStudio”\nScroll down and select the appropriate version for your operating system\nAn installer will download and provide simple instructions to follow\n\n\n\n\n\n\n\n\nWe will primarily use Posit Workbench on the servers, where the R version and many R packages are updated regularly\nSee the wiki for details: http://jjnb-wiki-v-00.bio.ri.ccf.org/index.php/Running_R\nLogin in using your Linux credentials at one of the links, for example lri-r07: https://lri-r07.lerner.ccf.org/auth-sign-in\n\n\n\n\nWhen you first open RStudio you will see a number of panes:\n\n\n\nThe layout of the panes can be customized by going to Tools &gt; Global Options &gt; Pane Layout.\nPanes:\n\nText editor - this is where you will type your code, and you will save this file to a project folder for reproducibility\nConsole - this is where the code will be executed\nOther panes will contain a variety of tabs. Some to note include:\n\nEnvironment: where you can see objects and data files that are available in your current session\nFiles: here you should be able to access all folders and files on your home drive\nPlots: this is where plots will disply\nHelp: this is where you will get help files for R functions\nViewer: this is where you would preview any html output like a gt table or Quarto document\n\n\n\n\n\nAlways use a text editor to type code so that it can be saved for reproducibility purposes.\nHow to open a text editor window:\n\nTo open a new text editor window go to: File &gt; New File &gt; R script\nTo save the file go to: File &gt; Save\n\n\n\n\nNavigate to https://lri-r07.lerner.ccf.org/auth-sign-in, log in, and run some example code.\nDemonstrate how to:\n\nCreate a new R script\nAdd some code to it\nRun the code\nView help files\nSave the R script\n\n\nx &lt;- c(1, 2, 3, 4)\nmean(x)\nhist(rnorm(100))\n?rnorm\n\n\n\n\nTo send this to the console to be executed, you can do one of the following:\n\nPlace your cursor next to the line you want to run and hit Ctrl+Enter on your keyboard\nPlace your cursor next to the line you want to run and hit the “Run” button\nHighlight all three lines of code and use one of the previous options\n\n\n\n\nGet help by typing ?fnname where fnname is the name of the function of interest.\n\ne.g. to see the help file for the mean function, type ?mean in the console\n??fnname can be used if you aren’t sure of the exact function name - it will return any keyword matches\n\n\n\n\nAfter we have run all three lines of code, we see the results of our mean computation in the Console pane.\nAnd we see the resulting histogram in the Plots pane.\n\n\n\n\n\n\n\n\n\nCRAN is the primary repository for user-contributed R packages.\nPackages that are on CRAN can be installed using the install.packages() function.\nFor example, we can install the {survival} package from CRAN using:\n\ninstall.packages(\"survival\")\n\nGitHub is a common repository for packages that are in development.\nTo install packages from GitHub, first install the {remotes} package from CRAN:\n\ninstall.packages(\"remotes\")\n\nThen, install the GitHub package of interest using install_github(\"username/repository\"). For example, to install the emo repository from the GitHub username hadley, use:\n\nlibrary(remotes)\ninstall_github(\"hadley/emo\")\n\nOr, avoid a call to the library() function by using the syntax library::function():\n\nremotes::install_github(\"hadley/emo\")\n\nBioconductor is a repository for open source code related to biological data. To install packages from Bioconductor, first install the {BiocManager} package from CRAN:\n\ninstall.packages(\"BiocManager\")\n\nThen install, for example, the {GenomicFeatures} package using the install function:\n\nBiocManager::install(\"GenomicFeatures\")\n\nInstallation is the first step. Only needs to be done once.\nLoading is the next step. Must be done every time you open a new R session in which you need to use the package.\nThere are two methods for loading R packages:\n\nA call to library() loads the package for your entire R session.\n\n\nlibrary(survival)\nsurvfit(formula, ...)\n\n\nUsing :: accesses the package only for a single function.\n\n\nsurvival::survfit(formula, ...)\n\n\n\n\nThe most common data format we work with are data from Excel. The example trial dataset is available in the {gtsummary} package in R.\n\nInstall and load the “gtsummary” package\nPreview the trial data by simply typing the name of the dataset:\n\n\ninstall.packages(\"gtsummary\")\n\n\nlibrary(gtsummary)\ntrial\n\n# A tibble: 200 × 8\n   trt      age marker stage grade response death ttdeath\n   &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt;    &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;\n 1 Drug A    23  0.16  T1    II           0     0    24  \n 2 Drug B     9  1.11  T2    I            1     0    24  \n 3 Drug A    31  0.277 T1    II           0     0    24  \n 4 Drug A    NA  2.07  T3    III          1     1    17.6\n 5 Drug A    51  2.77  T4    III          1     1    16.4\n 6 Drug B    39  0.613 T4    I            0     1    15.6\n 7 Drug A    37  0.354 T1    II           0     0    24  \n 8 Drug A    32  1.74  T1    I            0     1    18.4\n 9 Drug A    31  0.144 T1    II           0     0    24  \n10 Drug B    34  0.205 T3    I            0     1    10.5\n# ℹ 190 more rows\n\n\nThe help page for the trial data can be accessed by running:\n\n?trial\n\nAnd we see the variables and their definitions:\n\n\n\nI have saved this data file out to Excel so that we can practice loading it in R. Go to the course website to download the file named “trial-Excel.xlsx”. Save it somewhere you can find it again.\n\n\n\nThe most common data format we work with are data from Excel.\nData should be:\n\nOne dataset per file\nA single row of column headers across the top\nSimple column names are better - they will get transformed into variable names by R\nTypically one row per patient/sample is ideal\n\nWe will look at options to:\n\nRead in Excel files with {readxl}\nRead in Excel files by converting to .csv first\nRead in other file formats\n\nFirst, install the {readxl} package from CRAN, then load the newly installed package:\n\ninstall.packages(\"readxl\")\nlibrary(readxl)\n\nThen use the read_excel() function with the appropriate filepath to read in the data and create an object called “mydf”:\n\nmydf &lt;- read_excel(\n  \"H:/MMED/MMED501/data/trial-Excel.xlsx\"\n  )\n\nNote that R treats the \\ as a special character so you either need to use / or \\(\\backslash \\backslash\\) in file paths\nAlternatively, we can convert the file from .xlsx format to .csv format first, and then read it in.\nAdvantages: removes some of the possible formatting pitfalls associated with Excel files, and you don’t need any special packages to read this format.\n\nOpen the Excel file.\nGo to File &gt; Save As and select “CSV (Comma delimited)” from the “Save as type” drop down and save the file to the same location as “trial-csv.csv”\nUse the read.csv() function with the appropriate file path to read in the data and create an object called “mycsv”\n\n\nmycsv &lt;- \n  read.csv(\n    \"H:/MMED/MMED501/data/trial-csv.csv\"\n    ) \n\nNote that this is the approach I always use myself and will form the basis of all of my examples\nMany other file formats exist, and here is a non-comprehensive list of functions for loading some of them:\n\nread.table() is the most generic function and can read many file types\nread.csv() is a special case with fixed defaults for comma-separated files\nread.csv2() is a special case with fixed defaults for comma-separated files that were created in a country where commas are used in place of decimal places\nread.delim() is a special case with fixed defaults for tab-delimited files\nread.delim2() is a special case with fixed defaults for tab-delimited files that were created in a country where commas are used in place of decimal places\n\n\n\n\nUse the assignment operator &lt;- to assign values to objects\n\n&lt;- assigns values on the right, to objects on the left\nKeyboard shortcut “Alt” + “-” will insert the assignment operator\n\n\nx &lt;- 55\nx\n\n[1] 55\n\n\nFunctions are pre-packaged scripts that automate more complicated procedures. They are executed by typing the name of the function followed by round brackets. Inside the round brackets we can provide one or more parameters, or arguments:\n\nx &lt;- 144\nsqrt(x)\n\n[1] 12\n\ny &lt;- 123.225\nround(y)\n\n[1] 123\n\nround(y, digits = 1)\n\n[1] 123.2\n\n\nUse c() to create a vector of values or seq() to create a sequence of values:\n\na &lt;- c(1, 2, 3, 4)\nb &lt;- seq(from = 0, to = 100, by = 10)\nb &lt;- seq(0, 100, 10)\nb &lt;- seq(by = 10, to = 100, from = 0)\n\nNote: when we supply the arguments to a function in the order in which they are listed in the documentation, we do not need to name them. If we name them, we can supply them in any order. The above three assignments to b yield the same results.\nHere are all of the possible arguments to the seq() function:\n\nseq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),\n    length.out = NULL, along.with = NULL, ...)\n\nR is case sensitive:\n\ni.e. age is not the same as Age.\nVariable names with spaces are problematic:\n\nDepending on how you read your data in, R may or may not automatically reformat variable names\nIf you end up with a variable called, e.g. “Patient Age” you would need to reference it in backticks: `Patient Age`\nOne option is to use the clean_names() function from the {janitor} package to convert all variable names to snake case (or alternatives):\n\n\n\ninstall.packages(\"janitor\")\njanitor::clean_names(df)\n\nThe == operator tests equality between two values:\n\n5 == 5\n\n[1] TRUE\n\n5 == 9\n\n[1] FALSE\n\n\nThe first returns TRUE because 5 does in fact equal 5.\nThe second returns FALSE because 5 is not equal to 9.\nWe’ll need this later when we subset data.\nR has three main indexing operators:\n\nDollar sign: $\nDouble brackets: [[ ]]\nSingle brackets: [ ]\n\nTo access specific variables, use the $ operator in the form dataframe$varname, where dataframe is the name of the object to which we assigned our data set, and varname is the name of the variable of interest\nFor example, to calculate the mean of the variable age in the dataframe mycsv:\n\nmean(mycsv$age, na.rm = TRUE)\n\n[1] 47.2381\n\n\nNote that we need to add the argument na.rm = TRUE to remove missing values from the calculation of the mean, otherwise NA will be returned if missing values are present\nAlternatively, use double brackets in the form dataframe[[\"varname\"]]\n\nmean(mycsv[[\"age\"]], na.rm = TRUE)\n\n[1] 47.2381\n\n\nSometimes we may want to create a subset of our data, or access a value based on more than one dimension.\nDatasets typically have two dimensions: columns and rows\nFor dataframe df, let i index the row and j index the column.\nThen we can access any single cell in the dataframe using the syntax:\n\ndf[i, j]\n\nWe can use this concept to create subsets of our data as well.\nWe can create a subset of our data based on the values in a row, for example limiting to patients who were treated with Drug A:\n\ndf_sub &lt;- mycsv[mycsv$trt == \"Drug A\", ]\nnrow(df_sub)\n\n[1] 98\n\n\nWe see that the new data subset has 98 rows.\nThe & operator signifies “and”.\nSo for example we could subset based on patients who were treated with Drug A AND are over 45 years old:\n\ndf_sub &lt;- mycsv[mycsv$trt == \"Drug A\" & mycsv$age &gt; 45, ]\nnrow(df_sub)\n\n[1] 55\n\n\nAnd we see that the new data subset has 55 rows.\nThe | operator signifies “or”.\nSo for example we could subset based on patients who were treated with Drug A OR are over 45 years old:\n\ndf_sub &lt;- mycsv[mycsv$trt == \"Drug A\" | mycsv$age &gt; 45, ]\nnrow(df_sub)\n\n[1] 157\n\n\nAnd we see that our new datasubset has 157 rows.\nWe can also create a subset of our data based on columns, for example limiting to trt:\n\ndf_sub &lt;- mycsv[ , c(\"trt\")]\n\nOr we can simultaneously subset based on rows and columns, for example limiting to the trt column among patients with age greater than 45:\n\ndf_sub &lt;- mycsv[mycsv$age &gt; 45, c(\"trt\")]\n\nWe can also subset directly within functions. Suppose we want to calculate the mean of the variable age in the dataframe mycsv, but only among those who were treated with Drug A:\n\nmean(mycsv$age[mycsv$trt == \"Drug A\"], na.rm = TRUE)\n\n[1] 47.01099\n\n\nThis avoids creating additional datasets that may not be needed again.\n\n\n\n\nNext, we’ll review descriptive statistics in R. There are many ways to generate this type of descriptive statistics in R. I will demonstrate one way and if you end up using R a lot you will find what works well for you and the type of data you use.\nWe will be using some functions from the {janitor} package, so make sure you have that installed.\n\ninstall.packages(\"janitor\")\n\n\nlibrary(janitor)\n\nWe can also create very nice tables by also using the {gt} package.\n\ninstall.packages(\"gt\")\n\n\nlibrary(gt)\n\n\n\nFirst, we need to learn about the pipe operator, which we will use to string multiple functions together seamlessly.\nFor example, if we want to take the log transformation of the marker variable and then get the mean, we could nest the two functions as follows:\n\nmean(log(mycsv$marker), na.rm = TRUE)\n\n[1] -0.707878\n\n\nOr we can connect them with the pipe operator:\n\nmycsv$marker |&gt; \n  log() |&gt; \n  mean(na.rm = TRUE)\n\n[1] -0.707878\n\n\nThe left hand side is passed as the first argument to the function on the right hand side.\nYou can use the native pipe operator through the keyboard shortcut ctrl + shift + m.\nThis creates code that is very readable and concise, and easy to comment out various parts if needed.\nWe’ll be using this throughout the R sessions in this course.\n\n\n\nMake sure your variable of interest is in its own column in your dataframe, then use the tabyl() function from {janitor}:\n\nmycsv |&gt; \n  tabyl(trt) |&gt; \n  adorn_pct_formatting()\n\n    trt   n percent\n Drug A  98   49.0%\n Drug B 102   51.0%\n\n\nAnd we get a frequency table for the trt variable, with the percentages formatted using the adorn_pct_formatting() function.\n\n\n\nLet’s create a table with trt on the rows and response on the columns. The most basic table is created as:\n\nmycsv |&gt; \n  tabyl(trt, response)\n\n    trt  0  1 NA_\n Drug A 67 28   3\n Drug B 65 33   4\n\n\nThen we can use the {gt} package and it’s associated features to customize our two-way contingency table. See the {gt} package website for details.\nLet’s label the row variable and column variable, and add a title:\n\nmycsv |&gt; \n  tabyl(trt, response) |&gt; \n  gt(\n    rowname_col = \"trt\" \n  ) |&gt; \n  tab_spanner(          \n    columns = 2:4,\n    label = \"Response?\"\n  ) |&gt; \n  tab_stubhead(         \n    label = \"Treatment\" \n  ) %&gt;% \n  tab_header(           \n    title = \"Response according to treatment group\"\n  )\n\n\n\n\n\n  \n    \n      Response according to treatment group\n    \n    \n    \n      Treatment\n      \n        Response?\n      \n    \n    \n      0\n      1\n      NA_\n    \n  \n  \n    Drug A\n67\n28\n3\n    Drug B\n65\n33\n4\n  \n  \n  \n\n\n\n\nAlternatively, we could display percentages in our table:\n\nmycsv |&gt; \n  tabyl(trt, response) |&gt; \n  adorn_percentages(denominator = \"all\") |&gt; \n  gt() |&gt; \n  fmt_percent(\n    columns = -1,\n    decimals = 1\n  ) |&gt; \n  tab_spanner(          \n    columns = 2:4,\n    label = \"Response?\"\n  ) |&gt; \n  tab_stubhead(         \n    label = \"Treatment\" \n  ) %&gt;% \n  tab_header(           \n    title = \"Response according to treatment group\"\n  )\n\n\n\n\n\n  \n    \n      Response according to treatment group\n    \n    \n    \n      trt\n      \n        Response?\n      \n    \n    \n      0\n      1\n      NA_\n    \n  \n  \n    Drug A\n33.5%\n14.0%\n1.5%\n    Drug B\n32.5%\n16.5%\n2.0%\n  \n  \n  \n\n\n\n\n\n\n\nWe will use the summarize() function from the {dplyr} package to compute summary statistics.\n\ninstall.packages(\"dplyr\")\n\n\nlibrary(dplyr)\n\nLet’s compute the mean and standard deviation of age and marker:\n\nmycsv |&gt; \n  summarize(\n    avg_age = mean(age, na.rm = TRUE),\n    sd_age = sd(age, na.rm = TRUE),\n    avg_marker = mean(marker, na.rm = TRUE),\n    sd_marker = sd(marker, na.rm = TRUE)\n  )\n\n  avg_age   sd_age avg_marker sd_marker\n1 47.2381 14.31193  0.9159895 0.8592891\n\n\n\n\n\nAnd we can easily extend this code to generate summary statistics by group by using the group_by() function from the {dplyr} package.\nLet’s get the same summary table for age and marker, but by trt:\n\nmycsv |&gt; \n  group_by(trt) |&gt; \n  summarize(\n    avg_age = mean(age, na.rm = TRUE),\n    sd_age = sd(age, na.rm = TRUE),\n    avg_marker = mean(marker, na.rm = TRUE),\n    sd_marker = sd(marker, na.rm = TRUE)\n  )\n\n# A tibble: 2 × 5\n  trt    avg_age sd_age avg_marker sd_marker\n  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n1 Drug A    47.0   14.7      1.02      0.885\n2 Drug B    47.4   14.0      0.821     0.828"
  },
  {
    "objectID": "bio-epi-refresher.html#refresher-of-the-tools-course-material",
    "href": "bio-epi-refresher.html#refresher-of-the-tools-course-material",
    "title": "Biostatistics and Epidemiology - Session 1",
    "section": "",
    "text": "First, we’ll review the basics of R and R programming.\n\n\n\n\n\n\nR is a free, open-source software environment for statistical computing and graphics\nMany of the functions you may wish to use will be contributed by other users as packages and available through repositories such as CRAN, GitHub, or Bioconductor, among others\nIt is your responsibility to vet the quality and accuracy of any user-contributed packages\nThe functions available with the initial installation of R, known as base R, can be considered trustworthy\n\n\n\n\n\nGo to the website for The Comprehensive R Archive Network.\nThe top of the web page provides three links for downloading R. Follow the link that describes your operating system: Windows, Mac, or Linux.\n\n\n\n\n\n\n\n\nRStudio is an Integrated Development Environment (IDE).\nIt runs R and allows users to develop and edit programs and offers higher quality graphics and a more user-friendly interface.\nNote that RStudio is not a standalone program, you must have a separate installation of R\n\n\n\n\n\nGo to the website for RStudio\nSelect “Download RStudio Desktop” under “Open Source Edition”\nClick the button for “Download RStudio”\nScroll down and select the appropriate version for your operating system\nAn installer will download and provide simple instructions to follow\n\n\n\n\n\n\n\n\nWe will primarily use Posit Workbench on the servers, where the R version and many R packages are updated regularly\nSee the wiki for details: http://jjnb-wiki-v-00.bio.ri.ccf.org/index.php/Running_R\nLogin in using your Linux credentials at one of the links, for example lri-r07: https://lri-r07.lerner.ccf.org/auth-sign-in\n\n\n\n\nWhen you first open RStudio you will see a number of panes:\n\n\n\nThe layout of the panes can be customized by going to Tools &gt; Global Options &gt; Pane Layout.\nPanes:\n\nText editor - this is where you will type your code, and you will save this file to a project folder for reproducibility\nConsole - this is where the code will be executed\nOther panes will contain a variety of tabs. Some to note include:\n\nEnvironment: where you can see objects and data files that are available in your current session\nFiles: here you should be able to access all folders and files on your home drive\nPlots: this is where plots will disply\nHelp: this is where you will get help files for R functions\nViewer: this is where you would preview any html output like a gt table or Quarto document\n\n\n\n\n\nAlways use a text editor to type code so that it can be saved for reproducibility purposes.\nHow to open a text editor window:\n\nTo open a new text editor window go to: File &gt; New File &gt; R script\nTo save the file go to: File &gt; Save\n\n\n\n\nNavigate to https://lri-r07.lerner.ccf.org/auth-sign-in, log in, and run some example code.\nDemonstrate how to:\n\nCreate a new R script\nAdd some code to it\nRun the code\nView help files\nSave the R script\n\n\nx &lt;- c(1, 2, 3, 4)\nmean(x)\nhist(rnorm(100))\n?rnorm\n\n\n\n\nTo send this to the console to be executed, you can do one of the following:\n\nPlace your cursor next to the line you want to run and hit Ctrl+Enter on your keyboard\nPlace your cursor next to the line you want to run and hit the “Run” button\nHighlight all three lines of code and use one of the previous options\n\n\n\n\nGet help by typing ?fnname where fnname is the name of the function of interest.\n\ne.g. to see the help file for the mean function, type ?mean in the console\n??fnname can be used if you aren’t sure of the exact function name - it will return any keyword matches\n\n\n\n\nAfter we have run all three lines of code, we see the results of our mean computation in the Console pane.\nAnd we see the resulting histogram in the Plots pane.\n\n\n\n\n\n\n\n\n\nCRAN is the primary repository for user-contributed R packages.\nPackages that are on CRAN can be installed using the install.packages() function.\nFor example, we can install the {survival} package from CRAN using:\n\ninstall.packages(\"survival\")\n\nGitHub is a common repository for packages that are in development.\nTo install packages from GitHub, first install the {remotes} package from CRAN:\n\ninstall.packages(\"remotes\")\n\nThen, install the GitHub package of interest using install_github(\"username/repository\"). For example, to install the emo repository from the GitHub username hadley, use:\n\nlibrary(remotes)\ninstall_github(\"hadley/emo\")\n\nOr, avoid a call to the library() function by using the syntax library::function():\n\nremotes::install_github(\"hadley/emo\")\n\nBioconductor is a repository for open source code related to biological data. To install packages from Bioconductor, first install the {BiocManager} package from CRAN:\n\ninstall.packages(\"BiocManager\")\n\nThen install, for example, the {GenomicFeatures} package using the install function:\n\nBiocManager::install(\"GenomicFeatures\")\n\nInstallation is the first step. Only needs to be done once.\nLoading is the next step. Must be done every time you open a new R session in which you need to use the package.\nThere are two methods for loading R packages:\n\nA call to library() loads the package for your entire R session.\n\n\nlibrary(survival)\nsurvfit(formula, ...)\n\n\nUsing :: accesses the package only for a single function.\n\n\nsurvival::survfit(formula, ...)\n\n\n\n\nThe most common data format we work with are data from Excel. The example trial dataset is available in the {gtsummary} package in R.\n\nInstall and load the “gtsummary” package\nPreview the trial data by simply typing the name of the dataset:\n\n\ninstall.packages(\"gtsummary\")\n\n\nlibrary(gtsummary)\ntrial\n\n# A tibble: 200 × 8\n   trt      age marker stage grade response death ttdeath\n   &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt;    &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;\n 1 Drug A    23  0.16  T1    II           0     0    24  \n 2 Drug B     9  1.11  T2    I            1     0    24  \n 3 Drug A    31  0.277 T1    II           0     0    24  \n 4 Drug A    NA  2.07  T3    III          1     1    17.6\n 5 Drug A    51  2.77  T4    III          1     1    16.4\n 6 Drug B    39  0.613 T4    I            0     1    15.6\n 7 Drug A    37  0.354 T1    II           0     0    24  \n 8 Drug A    32  1.74  T1    I            0     1    18.4\n 9 Drug A    31  0.144 T1    II           0     0    24  \n10 Drug B    34  0.205 T3    I            0     1    10.5\n# ℹ 190 more rows\n\n\nThe help page for the trial data can be accessed by running:\n\n?trial\n\nAnd we see the variables and their definitions:\n\n\n\nI have saved this data file out to Excel so that we can practice loading it in R. Go to the course website to download the file named “trial-Excel.xlsx”. Save it somewhere you can find it again.\n\n\n\nThe most common data format we work with are data from Excel.\nData should be:\n\nOne dataset per file\nA single row of column headers across the top\nSimple column names are better - they will get transformed into variable names by R\nTypically one row per patient/sample is ideal\n\nWe will look at options to:\n\nRead in Excel files with {readxl}\nRead in Excel files by converting to .csv first\nRead in other file formats\n\nFirst, install the {readxl} package from CRAN, then load the newly installed package:\n\ninstall.packages(\"readxl\")\nlibrary(readxl)\n\nThen use the read_excel() function with the appropriate filepath to read in the data and create an object called “mydf”:\n\nmydf &lt;- read_excel(\n  \"H:/MMED/MMED501/data/trial-Excel.xlsx\"\n  )\n\nNote that R treats the \\ as a special character so you either need to use / or \\(\\backslash \\backslash\\) in file paths\nAlternatively, we can convert the file from .xlsx format to .csv format first, and then read it in.\nAdvantages: removes some of the possible formatting pitfalls associated with Excel files, and you don’t need any special packages to read this format.\n\nOpen the Excel file.\nGo to File &gt; Save As and select “CSV (Comma delimited)” from the “Save as type” drop down and save the file to the same location as “trial-csv.csv”\nUse the read.csv() function with the appropriate file path to read in the data and create an object called “mycsv”\n\n\nmycsv &lt;- \n  read.csv(\n    \"H:/MMED/MMED501/data/trial-csv.csv\"\n    ) \n\nNote that this is the approach I always use myself and will form the basis of all of my examples\nMany other file formats exist, and here is a non-comprehensive list of functions for loading some of them:\n\nread.table() is the most generic function and can read many file types\nread.csv() is a special case with fixed defaults for comma-separated files\nread.csv2() is a special case with fixed defaults for comma-separated files that were created in a country where commas are used in place of decimal places\nread.delim() is a special case with fixed defaults for tab-delimited files\nread.delim2() is a special case with fixed defaults for tab-delimited files that were created in a country where commas are used in place of decimal places\n\n\n\n\nUse the assignment operator &lt;- to assign values to objects\n\n&lt;- assigns values on the right, to objects on the left\nKeyboard shortcut “Alt” + “-” will insert the assignment operator\n\n\nx &lt;- 55\nx\n\n[1] 55\n\n\nFunctions are pre-packaged scripts that automate more complicated procedures. They are executed by typing the name of the function followed by round brackets. Inside the round brackets we can provide one or more parameters, or arguments:\n\nx &lt;- 144\nsqrt(x)\n\n[1] 12\n\ny &lt;- 123.225\nround(y)\n\n[1] 123\n\nround(y, digits = 1)\n\n[1] 123.2\n\n\nUse c() to create a vector of values or seq() to create a sequence of values:\n\na &lt;- c(1, 2, 3, 4)\nb &lt;- seq(from = 0, to = 100, by = 10)\nb &lt;- seq(0, 100, 10)\nb &lt;- seq(by = 10, to = 100, from = 0)\n\nNote: when we supply the arguments to a function in the order in which they are listed in the documentation, we do not need to name them. If we name them, we can supply them in any order. The above three assignments to b yield the same results.\nHere are all of the possible arguments to the seq() function:\n\nseq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),\n    length.out = NULL, along.with = NULL, ...)\n\nR is case sensitive:\n\ni.e. age is not the same as Age.\nVariable names with spaces are problematic:\n\nDepending on how you read your data in, R may or may not automatically reformat variable names\nIf you end up with a variable called, e.g. “Patient Age” you would need to reference it in backticks: `Patient Age`\nOne option is to use the clean_names() function from the {janitor} package to convert all variable names to snake case (or alternatives):\n\n\n\ninstall.packages(\"janitor\")\njanitor::clean_names(df)\n\nThe == operator tests equality between two values:\n\n5 == 5\n\n[1] TRUE\n\n5 == 9\n\n[1] FALSE\n\n\nThe first returns TRUE because 5 does in fact equal 5.\nThe second returns FALSE because 5 is not equal to 9.\nWe’ll need this later when we subset data.\nR has three main indexing operators:\n\nDollar sign: $\nDouble brackets: [[ ]]\nSingle brackets: [ ]\n\nTo access specific variables, use the $ operator in the form dataframe$varname, where dataframe is the name of the object to which we assigned our data set, and varname is the name of the variable of interest\nFor example, to calculate the mean of the variable age in the dataframe mycsv:\n\nmean(mycsv$age, na.rm = TRUE)\n\n[1] 47.2381\n\n\nNote that we need to add the argument na.rm = TRUE to remove missing values from the calculation of the mean, otherwise NA will be returned if missing values are present\nAlternatively, use double brackets in the form dataframe[[\"varname\"]]\n\nmean(mycsv[[\"age\"]], na.rm = TRUE)\n\n[1] 47.2381\n\n\nSometimes we may want to create a subset of our data, or access a value based on more than one dimension.\nDatasets typically have two dimensions: columns and rows\nFor dataframe df, let i index the row and j index the column.\nThen we can access any single cell in the dataframe using the syntax:\n\ndf[i, j]\n\nWe can use this concept to create subsets of our data as well.\nWe can create a subset of our data based on the values in a row, for example limiting to patients who were treated with Drug A:\n\ndf_sub &lt;- mycsv[mycsv$trt == \"Drug A\", ]\nnrow(df_sub)\n\n[1] 98\n\n\nWe see that the new data subset has 98 rows.\nThe & operator signifies “and”.\nSo for example we could subset based on patients who were treated with Drug A AND are over 45 years old:\n\ndf_sub &lt;- mycsv[mycsv$trt == \"Drug A\" & mycsv$age &gt; 45, ]\nnrow(df_sub)\n\n[1] 55\n\n\nAnd we see that the new data subset has 55 rows.\nThe | operator signifies “or”.\nSo for example we could subset based on patients who were treated with Drug A OR are over 45 years old:\n\ndf_sub &lt;- mycsv[mycsv$trt == \"Drug A\" | mycsv$age &gt; 45, ]\nnrow(df_sub)\n\n[1] 157\n\n\nAnd we see that our new datasubset has 157 rows.\nWe can also create a subset of our data based on columns, for example limiting to trt:\n\ndf_sub &lt;- mycsv[ , c(\"trt\")]\n\nOr we can simultaneously subset based on rows and columns, for example limiting to the trt column among patients with age greater than 45:\n\ndf_sub &lt;- mycsv[mycsv$age &gt; 45, c(\"trt\")]\n\nWe can also subset directly within functions. Suppose we want to calculate the mean of the variable age in the dataframe mycsv, but only among those who were treated with Drug A:\n\nmean(mycsv$age[mycsv$trt == \"Drug A\"], na.rm = TRUE)\n\n[1] 47.01099\n\n\nThis avoids creating additional datasets that may not be needed again.\n\n\n\n\nNext, we’ll review descriptive statistics in R. There are many ways to generate this type of descriptive statistics in R. I will demonstrate one way and if you end up using R a lot you will find what works well for you and the type of data you use.\nWe will be using some functions from the {janitor} package, so make sure you have that installed.\n\ninstall.packages(\"janitor\")\n\n\nlibrary(janitor)\n\nWe can also create very nice tables by also using the {gt} package.\n\ninstall.packages(\"gt\")\n\n\nlibrary(gt)\n\n\n\nFirst, we need to learn about the pipe operator, which we will use to string multiple functions together seamlessly.\nFor example, if we want to take the log transformation of the marker variable and then get the mean, we could nest the two functions as follows:\n\nmean(log(mycsv$marker), na.rm = TRUE)\n\n[1] -0.707878\n\n\nOr we can connect them with the pipe operator:\n\nmycsv$marker |&gt; \n  log() |&gt; \n  mean(na.rm = TRUE)\n\n[1] -0.707878\n\n\nThe left hand side is passed as the first argument to the function on the right hand side.\nYou can use the native pipe operator through the keyboard shortcut ctrl + shift + m.\nThis creates code that is very readable and concise, and easy to comment out various parts if needed.\nWe’ll be using this throughout the R sessions in this course.\n\n\n\nMake sure your variable of interest is in its own column in your dataframe, then use the tabyl() function from {janitor}:\n\nmycsv |&gt; \n  tabyl(trt) |&gt; \n  adorn_pct_formatting()\n\n    trt   n percent\n Drug A  98   49.0%\n Drug B 102   51.0%\n\n\nAnd we get a frequency table for the trt variable, with the percentages formatted using the adorn_pct_formatting() function.\n\n\n\nLet’s create a table with trt on the rows and response on the columns. The most basic table is created as:\n\nmycsv |&gt; \n  tabyl(trt, response)\n\n    trt  0  1 NA_\n Drug A 67 28   3\n Drug B 65 33   4\n\n\nThen we can use the {gt} package and it’s associated features to customize our two-way contingency table. See the {gt} package website for details.\nLet’s label the row variable and column variable, and add a title:\n\nmycsv |&gt; \n  tabyl(trt, response) |&gt; \n  gt(\n    rowname_col = \"trt\" \n  ) |&gt; \n  tab_spanner(          \n    columns = 2:4,\n    label = \"Response?\"\n  ) |&gt; \n  tab_stubhead(         \n    label = \"Treatment\" \n  ) %&gt;% \n  tab_header(           \n    title = \"Response according to treatment group\"\n  )\n\n\n\n\n\n  \n    \n      Response according to treatment group\n    \n    \n    \n      Treatment\n      \n        Response?\n      \n    \n    \n      0\n      1\n      NA_\n    \n  \n  \n    Drug A\n67\n28\n3\n    Drug B\n65\n33\n4\n  \n  \n  \n\n\n\n\nAlternatively, we could display percentages in our table:\n\nmycsv |&gt; \n  tabyl(trt, response) |&gt; \n  adorn_percentages(denominator = \"all\") |&gt; \n  gt() |&gt; \n  fmt_percent(\n    columns = -1,\n    decimals = 1\n  ) |&gt; \n  tab_spanner(          \n    columns = 2:4,\n    label = \"Response?\"\n  ) |&gt; \n  tab_stubhead(         \n    label = \"Treatment\" \n  ) %&gt;% \n  tab_header(           \n    title = \"Response according to treatment group\"\n  )\n\n\n\n\n\n  \n    \n      Response according to treatment group\n    \n    \n    \n      trt\n      \n        Response?\n      \n    \n    \n      0\n      1\n      NA_\n    \n  \n  \n    Drug A\n33.5%\n14.0%\n1.5%\n    Drug B\n32.5%\n16.5%\n2.0%\n  \n  \n  \n\n\n\n\n\n\n\nWe will use the summarize() function from the {dplyr} package to compute summary statistics.\n\ninstall.packages(\"dplyr\")\n\n\nlibrary(dplyr)\n\nLet’s compute the mean and standard deviation of age and marker:\n\nmycsv |&gt; \n  summarize(\n    avg_age = mean(age, na.rm = TRUE),\n    sd_age = sd(age, na.rm = TRUE),\n    avg_marker = mean(marker, na.rm = TRUE),\n    sd_marker = sd(marker, na.rm = TRUE)\n  )\n\n  avg_age   sd_age avg_marker sd_marker\n1 47.2381 14.31193  0.9159895 0.8592891\n\n\n\n\n\nAnd we can easily extend this code to generate summary statistics by group by using the group_by() function from the {dplyr} package.\nLet’s get the same summary table for age and marker, but by trt:\n\nmycsv |&gt; \n  group_by(trt) |&gt; \n  summarize(\n    avg_age = mean(age, na.rm = TRUE),\n    sd_age = sd(age, na.rm = TRUE),\n    avg_marker = mean(marker, na.rm = TRUE),\n    sd_marker = sd(marker, na.rm = TRUE)\n  )\n\n# A tibble: 2 × 5\n  trt    avg_age sd_age avg_marker sd_marker\n  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n1 Drug A    47.0   14.7      1.02      0.885\n2 Drug B    47.4   14.0      0.821     0.828"
  },
  {
    "objectID": "bio-epi-visualization.html",
    "href": "bio-epi-visualization.html",
    "title": "Biostatistics and Epidemiology - Session 1",
    "section": "",
    "text": "In this session, we will review the basics of R and generating descriptive statistics in R, which were introduced in the Tools course. Then we will learn about data visualization, including creating scatterplots, bar charts, histograms, line charts, and boxplots. We’ll discuss plot customization, faceting, and saving plots. Both univariate and bivariable plotting will be covered."
  }
]